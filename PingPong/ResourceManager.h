#pragma once
#include <map>
#include <SFML/Graphics.hpp>
class ResourceManager {
public:
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Default constructor. Deprecated, use getInstance() instead
	//////////////////////////////////////////////////////////////////////////////////////////////
	ResourceManager();
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Main way of accesing resource manager instance, returns static reference to manager.
	/// \example ResourceManager::getInstance()->addImageFromFile(filename,"exampleImage")
	//////////////////////////////////////////////////////////////////////////////////////////////
	static ResourceManager* getInstance() {
		static ResourceManager instance;
		return &instance;
	}
	~ResourceManager();
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief deletes textures from the container, leaving every id pointing to nullptr
	//////////////////////////////////////////////////////////////////////////////////////////////
	void clearTextures();
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief deletes images from the container, leaving every id pointing to nullptr
	//////////////////////////////////////////////////////////////////////////////////////////////
	void clearImages();
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief returns pointer to texture from the Texture map, if texture id is not found, returns nullptr
	/// \param texId id of the texture, previously added to res manager
	//////////////////////////////////////////////////////////////////////////////////////////////
	sf::Texture* RequestTexture(std::string texId);
	//////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief returns pointer to image from the Image map, if image id is not found returns nullptr
    /// \param texId id of the texture, previously added to res manager
    //////////////////////////////////////////////////////////////////////////////////////////////
	sf::Image* RequestImage(std::string imgId);
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Adds texture to the container
	/// \param fileName name of the file (WITH EXTENSION). Files need to be placed into assets folder
	/// \param texId name of the texture, to later access it from map container
	//////////////////////////////////////////////////////////////////////////////////////////////
	bool addTextureFromFile(const std::string fileName, const std::string texId);
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Adds image to the container
	/// \param fileName name of the file (WITH EXTENSION). Files need to be placed into assets folder
	/// \param imgId name of the image, to later access it from map container
	//////////////////////////////////////////////////////////////////////////////////////////////
	bool addImageFromFile(const std::string fileName, const std::string imgId);
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Adds image to the container
	/// \param sourceImg reference image.
	/// \param texId name of the texture, to later access it from map container
	//////////////////////////////////////////////////////////////////////////////////////////////
	bool addTextureFromImage(sf::Image &sourceImg, const std::string texId);
	//////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Adds image to the container
	/// \param color sf::Color reference to fill the image from
    /// \param imgId name of the image, to later access it from map container
	//////////////////////////////////////////////////////////////////////////////////////////////
	bool addImageFromColor(unsigned int width, unsigned int  height, sf::Color& color, std::string imgId);
private:
	std::map<std::string, sf::Texture*> m_Textures;
	std::map<std::string, sf::Image*> m_Images;
};